project.ext {
    minSdkVersion = 18
    compileSdkVersion = 27
    targetSdkVersion = 27 // less than 23 to avoid the runtime-permission check
    buildToolsVersion = '27.0.3'
    supportLibraryVersion = '27.1.0'
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        mavenLocal()
        google()
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'org.greenrobot.greendao'

repositories {
    // the private maven repo is related with the viewpagerindicator
    maven { url 'https://github.com/donnfelker/mvn-repo/raw/master/' }
    mavenLocal()
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    google()
    flatDir {
        dirs 'libs'
    }
}

def computeVersionCode() {

    if (System.env.BUILD_NUMBER) {              // Check if there is a system build number.
        return "$System.env.BUILD_NUMBER".toInteger()
    } else if (System.env.CIRCLE_BUILD_NUM) {   // Check to see if this is built on circle CI
        return "$System.env.CIRCLE_BUILD_NUM".toInteger()
    } else {
        return 1                                // if none is found, default to 1.
    }
}

def computeVersionName() {
    return "1." + computeVersionCode()
}

//noinspection GroovyUnusedAssignment
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()


android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion

        versionCode computeVersionCode()
        versionName computeVersionName()

        // Enable this if you want to use Build.GIT_SHA in your code somewhere.
        // This will give you the last GIT_SHA that was committed
        // buildConfigField "String", "GIT_SHA", "\"${gitSha}\""

        manifestPlaceholders = [
                fabricCrashlyticsApiKey: crashlyticsApiKey   // Set this in your ~/.gradle/gradle.properties as: crashlyticsApiKey or use "$System.env.CRASHLYTICS_API_KEY"  to use a env variable (and then set that value, of course)
        ]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    packagingOptions {
        // Exclude file to avoid
        // Error: Duplicate files during packaging of APK
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
    }

     signingConfigs {
         // Uncomment and set values and then this will work
//         debug {
//             storeFile file(ANDROID_KEYSTORE_PATH)
//             storePassword ANDROID_STORE_PASS
//             keyAlias ANDROID_KEY_ALIAS
//             keyPassword ANDROID_KEY_PASS
//         }
//         release {
//             storeFile file(ANDROID_KEYSTORE_PATH)
//             storePassword ANDROID_STORE_PASS
//             keyAlias ANDROID_KEY_ALIAS
//             keyPassword ANDROID_KEY_PASS
//         }
     }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled false
//            signingConfig signingConfigs.debug
            // zipAlign false // this is default for debug
        }
        release {
            minifyEnabled true
            proguardFile '../proguard.cfg'
//            signingConfig signingConfigs.release
            // zipAlign true // this is default for release
            // testPackageName 'com.zeonic.ykt.tests'
            // testInstrumentationRunner 'android.test.InstrumentationTestRunner' // this is the default
        }
    }
    // for baidu so
    sourceSets {
        main {
//            main.java.srcDirs += 'build/generated/source/greendao'
            jniLibs.srcDirs = ['libs']
        }
    }
    // auto output release apk to project path
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
//            def flavor = variant.productFlavors[0].name
            def buildType = variant.variantData.variantConfiguration.buildType.name
            if (buildType == 'release'){
                def versionName = variant.versionName
                def versionCode = variant.versionCode
                def newApkName = "njc_${versionName}_${versionCode}_${buildType}.apk"
                outputFileName = "../${newApkName}"
            }
        }
    }
    // https://github.com/JakeWharton/butterknife/issues/861
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                // Force all of the primary support libraries to use the same version.
                if (details.requested.group == 'com.android.support'
                        && !details.requested.name.startsWith('multidex')) {
                    details.useVersion supportLibraryVersion
                }
            }
        }
    }
}

dependencies {
    // Android Support Libs
    implementation 'com.android.support:support-v4:' + supportLibraryVersion
    implementation 'com.android.support:appcompat-v7:' + supportLibraryVersion
    implementation 'com.android.support:percent:' + supportLibraryVersion

    implementation 'com.google.code.gson:gson:2.3'
    // Dependency Injection
    annotationProcessor 'com.google.dagger:dagger-compiler:2.4' //remove android apt plugin
    implementation 'com.google.dagger:dagger:2.4'
    // View Injection
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    // Logging
    implementation 'com.jakewharton.timber:timber:3.0.2'
    implementation 'com.actionbarsherlock:viewpagerindicator:2.4.1'
    implementation 'com.nineoldandroids:library:2.4.0'
    // Event Bus
    implementation 'org.greenrobot:eventbus:3.0.0'
    // Image Loading
    implementation 'com.squareup.picasso:picasso:1.1.1'
    //ZXing  QRCode lib
    implementation 'com.google.zxing:core:3.3.0'
    // HTTP
    implementation 'com.squareup.retrofit:retrofit:1.9.0'
    //    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    implementation 'com.squareup.okhttp:okhttp:2.5.0'
    implementation 'com.squareup.okhttp:okhttp-urlconnection:2.5.0'
    // Retrofit XML converter (Simple)
    implementation('com.squareup.retrofit:converter-simplexml:1.9.0') {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }
    // assert dao
    implementation 'com.readystatesoftware.sqliteasset:sqliteassethelper:+'
    // orm
    implementation 'org.greenrobot:greendao:3.2.2'
    // Fabric/Crashlytics
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true
    }
    implementation 'de.hdodenhof:circleimageview:2.1.0'
    // baidu map
    //    compile files('libs/BaiduLBS_Android.jar')
    implementation fileTree(include: '*.jar', dir: 'libs')
    // RX android
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
// Because RxAndroid releases are few and far between, it is recommended you also
// explicitly depend on RxJava's latest version for bug fixes and new features.
    implementation 'io.reactivex.rxjava2:rxjava:2.1.0'

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:0.4'
    // Set this dependency to use JUnit 4 rules
    androidTestImplementation 'com.android.support.test:rules:0.4'
    // Set this dependency to build and run Espresso tests
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.1'
    // Contrib
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:2.2.1') {
        // http://stackoverflow.com/a/30931887/5210
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    // Set this dependency to build and run UI Automator tests
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    androidTestImplementation 'org.mockito:mockito-core:1.9.5'
    greendao {
        /**
         * 1, Nothing
         */
        schemaVersion 1
//    targetGenDir 'src/main/java/'
    }
}
